============================
stack SDKとは
============================

| stack SDKはstack クライアントを開発するための機能を実装したシンプルなnpmパッケージです。
| 主に、stack APIを利用するための複雑なアカウントデータ作成処理、及びstack APIを利用したへのデータのアップロード、ダウンロード等を最小限のソースコードで実装することができます。


導入
============================
| npmコマンドを使用してインストールして下さい。

::

    $npm install stack-SDK


基本的な使い方
============================

| 以下にstack SDKが提供する主な機能とシンプルなサンプルコードを紹介します。
| それぞれの機能やパブリックメソッドについての詳しい解説は :doc:`stack` を参照して下さい。


1.stackアカウントの作成/取得
----------------------------

| stack用のアカウント情報（アドレス、秘密鍵、mnemonicによるシード鍵）の作成はstackクラスのパブリックメソッドである ``createAccount()`` を使って行います。
| 下記は新しくアカウント情報を作成し、出力するサンプルです。

サンプルコード::

    import Stack from './stack';
    let stackAccount = Stack.createAccount();
    console.log(stackAccount) //アカウント情報（アドレス、秘密鍵、mnemonicによるシード鍵）が出力されます。


| また既にアカウント情報がある場合はstackクラスのパブリックメソッドである ``setAccount()`` を用い、利用するアカウントの秘密鍵やアドレスをstackへ渡す必要があります。

サンプルコード::

    import Stack from './stack';
    let stackAccount = Stack.setAccount(privateKey,address);
    console.log(stackAccount) //アカウント情報（アドレス、秘密鍵、mnemonicによるシード鍵）が出力されます。


2.ベースURLのセット
----------------------------

| データの保存、データの取得はstack REST APIを利用して行っています。
| そのため、エンドポイントベースURLを指定して、セットする必要があります。
| ベースURLの指定には ``setUrl()`` を使用します。

サンプルコード::

    const baseUrl = "http://localhost:3000";
    Stack.setUrl(baseUrl);


3.データの保存
----------------------------

| アカウントに紐づくデータの保存には ``save()`` を使用します。
| データの保存、取得を行うためにはstack REST APIサーバーのベースURLがセットされている必要があります。
| 保存時には保存するデータと、データと対になる ''key'' を指定する必要があります。

サンプルコード::

    let result = Stack.save(data,key);



4.データの取得
----------------------------

| 保存を行ったデータの取得には ``load()`` を使用します。
| データの保存、取得を行うためにはstack REST APIサーバーのベースURLがセットされている必要があります。
| 取得時には、保存時に指定した ``key`` を指定する必要があります。

サンプルコード::

    let data = Stack.load(key);

